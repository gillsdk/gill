/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const ESCROW_DISCRIMINATOR = new Uint8Array([
  31, 213, 123, 187, 186, 22, 218, 155,
]);

export function getEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ESCROW_DISCRIMINATOR);
}

export type Escrow = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  maker: Address;
  mintA: Address;
  mintB: Address;
  receiveAmt: bigint;
  bump: number;
};

export type EscrowArgs = {
  seed: number | bigint;
  maker: Address;
  mintA: Address;
  mintB: Address;
  receiveAmt: number | bigint;
  bump: number;
};

export function getEscrowEncoder(): FixedSizeEncoder<EscrowArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['maker', getAddressEncoder()],
      ['mintA', getAddressEncoder()],
      ['mintB', getAddressEncoder()],
      ['receiveAmt', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ESCROW_DISCRIMINATOR })
  );
}

export function getEscrowDecoder(): FixedSizeDecoder<Escrow> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['maker', getAddressDecoder()],
    ['mintA', getAddressDecoder()],
    ['mintB', getAddressDecoder()],
    ['receiveAmt', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getEscrowCodec(): FixedSizeCodec<EscrowArgs, Escrow> {
  return combineCodec(getEscrowEncoder(), getEscrowDecoder());
}

export function decodeEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Escrow, TAddress>;
export function decodeEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Escrow, TAddress>;
export function decodeEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Escrow, TAddress> | MaybeAccount<Escrow, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEscrowDecoder()
  );
}

export async function fetchEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Escrow, TAddress>> {
  const maybeAccount = await fetchMaybeEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Escrow, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEscrow(maybeAccount);
}

export async function fetchAllEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Escrow>[]> {
  const maybeAccounts = await fetchAllMaybeEscrow(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Escrow>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEscrow(maybeAccount));
}

export function getEscrowSize(): number {
  return 121;
}
