/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type MakeArgs = {
  amount: ReadonlyUint8Array;
  receive: ReadonlyUint8Array;
  seed: ReadonlyUint8Array;
  bump: number;
};

export type MakeArgsArgs = MakeArgs;

export function getMakeArgsEncoder(): FixedSizeEncoder<MakeArgsArgs> {
  return getStructEncoder([
    ['amount', fixEncoderSize(getBytesEncoder(), 8)],
    ['receive', fixEncoderSize(getBytesEncoder(), 8)],
    ['seed', fixEncoderSize(getBytesEncoder(), 8)],
    ['bump', getU8Encoder()],
  ]);
}

export function getMakeArgsDecoder(): FixedSizeDecoder<MakeArgs> {
  return getStructDecoder([
    ['amount', fixDecoderSize(getBytesDecoder(), 8)],
    ['receive', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
  ]);
}

export function getMakeArgsCodec(): FixedSizeCodec<MakeArgsArgs, MakeArgs> {
  return combineCodec(getMakeArgsEncoder(), getMakeArgsDecoder());
}

export function decodeMakeArgs<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MakeArgs, TAddress>;
export function decodeMakeArgs<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MakeArgs, TAddress>;
export function decodeMakeArgs<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MakeArgs, TAddress> | MaybeAccount<MakeArgs, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMakeArgsDecoder()
  );
}

export async function fetchMakeArgs<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MakeArgs, TAddress>> {
  const maybeAccount = await fetchMaybeMakeArgs(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMakeArgs<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MakeArgs, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMakeArgs(maybeAccount);
}

export async function fetchAllMakeArgs(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MakeArgs>[]> {
  const maybeAccounts = await fetchAllMaybeMakeArgs(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMakeArgs(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MakeArgs>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMakeArgs(maybeAccount));
}

export function getMakeArgsSize(): number {
  return 25;
}
