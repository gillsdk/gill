/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedMakeInstruction,
  type ParsedRefundInstruction,
  type ParsedTakeInstruction,
} from '../instructions';

export const ESCROW_P_PROGRAM_ADDRESS =
  '4ibrEMW5F6hKnkW4jVedswYv6H6VtwPN6ar6dvXDN1nT' as Address<'4ibrEMW5F6hKnkW4jVedswYv6H6VtwPN6ar6dvXDN1nT'>;

export enum EscrowPAccount {
  MakeArgs,
}

export enum EscrowPInstruction {
  Make,
  Take,
  Refund,
}

export function identifyEscrowPInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EscrowPInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return EscrowPInstruction.Make;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return EscrowPInstruction.Take;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return EscrowPInstruction.Refund;
  }
  throw new Error(
    'The provided instruction could not be identified as a escrowP instruction.'
  );
}

export type ParsedEscrowPInstruction<
  TProgram extends string = '4ibrEMW5F6hKnkW4jVedswYv6H6VtwPN6ar6dvXDN1nT',
> =
  | ({
      instructionType: EscrowPInstruction.Make;
    } & ParsedMakeInstruction<TProgram>)
  | ({
      instructionType: EscrowPInstruction.Take;
    } & ParsedTakeInstruction<TProgram>)
  | ({
      instructionType: EscrowPInstruction.Refund;
    } & ParsedRefundInstruction<TProgram>);
