/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "gill";
import { ESCROW_PROGRAM_PROGRAM_ADDRESS } from "../programs";
import { expectAddress, expectSome, getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const MAKE_DISCRIMINATOR = new Uint8Array([0]);

export function getMakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(MAKE_DISCRIMINATOR);
}

export type MakeInstruction<
  TProgram extends string = typeof ESCROW_PROGRAM_PROGRAM_ADDRESS,
  TAccountMaker extends string | AccountMeta<string> = string,
  TAccountEscrow extends string | AccountMeta<string> = string,
  TAccountMintA extends string | AccountMeta<string> = string,
  TAccountMintB extends string | AccountMeta<string> = string,
  TAccountMakerAtaA extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends string | AccountMeta<string> = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
  TAccountTokenProgram extends string | AccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountSystemProgram extends string | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMaker extends string
        ? WritableSignerAccount<TAccountMaker> & AccountSignerMeta<TAccountMaker>
        : TAccountMaker,
      TAccountEscrow extends string ? WritableAccount<TAccountEscrow> : TAccountEscrow,
      TAccountMintA extends string ? ReadonlyAccount<TAccountMintA> : TAccountMintA,
      TAccountMintB extends string ? ReadonlyAccount<TAccountMintB> : TAccountMintB,
      TAccountMakerAtaA extends string ? WritableAccount<TAccountMakerAtaA> : TAccountMakerAtaA,
      TAccountVault extends string ? WritableAccount<TAccountVault> : TAccountVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
      TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  receive: bigint;
  amount: bigint;
};

export type MakeInstructionDataArgs = {
  seed: number | bigint;
  receive: number | bigint;
  amount: number | bigint;
};

export function getMakeInstructionDataEncoder(): FixedSizeEncoder<MakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["seed", getU64Encoder()],
      ["receive", getU64Encoder()],
      ["amount", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MAKE_DISCRIMINATOR }),
  );
}

export function getMakeInstructionDataDecoder(): FixedSizeDecoder<MakeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["seed", getU64Decoder()],
    ["receive", getU64Decoder()],
    ["amount", getU64Decoder()],
  ]);
}

export function getMakeInstructionDataCodec(): FixedSizeCodec<MakeInstructionDataArgs, MakeInstructionData> {
  return combineCodec(getMakeInstructionDataEncoder(), getMakeInstructionDataDecoder());
}

export type MakeAsyncInput<
  TAccountMaker extends string = string,
  TAccountEscrow extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountMakerAtaA extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  maker: TransactionSigner<TAccountMaker>;
  escrow?: Address<TAccountEscrow>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  makerAtaA?: Address<TAccountMakerAtaA>;
  vault?: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: MakeInstructionDataArgs["seed"];
  receive: MakeInstructionDataArgs["receive"];
  amount: MakeInstructionDataArgs["amount"];
};

export async function getMakeInstructionAsync<
  TAccountMaker extends string,
  TAccountEscrow extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountMakerAtaA extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ESCROW_PROGRAM_PROGRAM_ADDRESS,
>(
  input: MakeAsyncInput<
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountMintB,
    TAccountMakerAtaA,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  MakeInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountMintB,
    TAccountMakerAtaA,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? ESCROW_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    maker: { value: input.maker ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    makerAtaA: { value: input.makerAtaA ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrow.value) {
    accounts.escrow.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getU64Encoder().encode(expectSome(args.seed)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.makerAtaA.value) {
    accounts.makerAtaA.value = await getProgramDerivedAddress({
      programAddress:
        "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.makerAtaA),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMakeInstructionDataEncoder().encode(args as MakeInstructionDataArgs),
    programAddress,
  } as MakeInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountMintB,
    TAccountMakerAtaA,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type MakeInput<
  TAccountMaker extends string = string,
  TAccountEscrow extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountMakerAtaA extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  maker: TransactionSigner<TAccountMaker>;
  escrow: Address<TAccountEscrow>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  makerAtaA: Address<TAccountMakerAtaA>;
  vault: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: MakeInstructionDataArgs["seed"];
  receive: MakeInstructionDataArgs["receive"];
  amount: MakeInstructionDataArgs["amount"];
};

export function getMakeInstruction<
  TAccountMaker extends string,
  TAccountEscrow extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountMakerAtaA extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ESCROW_PROGRAM_PROGRAM_ADDRESS,
>(
  input: MakeInput<
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountMintB,
    TAccountMakerAtaA,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): MakeInstruction<
  TProgramAddress,
  TAccountMaker,
  TAccountEscrow,
  TAccountMintA,
  TAccountMintB,
  TAccountMakerAtaA,
  TAccountVault,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ESCROW_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    maker: { value: input.maker ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    makerAtaA: { value: input.makerAtaA ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.makerAtaA),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMakeInstructionDataEncoder().encode(args as MakeInstructionDataArgs),
    programAddress,
  } as MakeInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountEscrow,
    TAccountMintA,
    TAccountMintB,
    TAccountMakerAtaA,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedMakeInstruction<
  TProgram extends string = typeof ESCROW_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    maker: TAccountMetas[0];
    escrow: TAccountMetas[1];
    mintA: TAccountMetas[2];
    mintB: TAccountMetas[3];
    makerAtaA: TAccountMetas[4];
    vault: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: MakeInstructionData;
};

export function parseMakeInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>,
): ParsedMakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      maker: getNextAccount(),
      escrow: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      makerAtaA: getNextAccount(),
      vault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMakeInstructionDataDecoder().decode(instruction.data),
  };
}
