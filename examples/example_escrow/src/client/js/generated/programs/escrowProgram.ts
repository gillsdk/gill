/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { containsBytes, fixEncoderSize, getBytesEncoder, type Address, type ReadonlyUint8Array } from "gill";
import { type ParsedMakeInstruction, type ParsedRefundInstruction, type ParsedTakeInstruction } from "../instructions";

export const ESCROW_PROGRAM_PROGRAM_ADDRESS =
  "HJ3Lezks1xLUWtAhKx4Skp7USyLgCFuLwe1d4uzs8CMq" as Address<"HJ3Lezks1xLUWtAhKx4Skp7USyLgCFuLwe1d4uzs8CMq">;

export enum EscrowProgramAccount {
  Escrow,
}

export function identifyEscrowProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): EscrowProgramAccount {
  const data = "data" in account ? account.data : account;
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([1])), 0)) {
    return EscrowProgramAccount.Escrow;
  }
  throw new Error("The provided account could not be identified as a escrowProgram account.");
}

export enum EscrowProgramInstruction {
  Make,
  Refund,
  Take,
}

export function identifyEscrowProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): EscrowProgramInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([0])), 0)) {
    return EscrowProgramInstruction.Make;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([2])), 0)) {
    return EscrowProgramInstruction.Refund;
  }
  if (containsBytes(data, fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([1])), 0)) {
    return EscrowProgramInstruction.Take;
  }
  throw new Error("The provided instruction could not be identified as a escrowProgram instruction.");
}

export type ParsedEscrowProgramInstruction<TProgram extends string = "HJ3Lezks1xLUWtAhKx4Skp7USyLgCFuLwe1d4uzs8CMq"> =
  | ({
      instructionType: EscrowProgramInstruction.Make;
    } & ParsedMakeInstruction<TProgram>)
  | ({
      instructionType: EscrowProgramInstruction.Refund;
    } & ParsedRefundInstruction<TProgram>)
  | ({
      instructionType: EscrowProgramInstruction.Take;
    } & ParsedTakeInstruction<TProgram>);
