/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { isProgramError, type Address, type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, type SolanaError } from "gill";
import { ESCROW_PROGRAM_PROGRAM_ADDRESS } from "../programs";

/** InvalidAmount: Invalid amount */
export const ESCROW_PROGRAM_ERROR__INVALID_AMOUNT = 0x1770; // 6000
/** InvalidMaker: Invalid maker */
export const ESCROW_PROGRAM_ERROR__INVALID_MAKER = 0x1771; // 6001
/** InvalidMintA: Invalid mint a */
export const ESCROW_PROGRAM_ERROR__INVALID_MINT_A = 0x1772; // 6002
/** InvalidMintB: Invalid mint B */
export const ESCROW_PROGRAM_ERROR__INVALID_MINT_B = 0x1773; // 6003

export type EscrowProgramError =
  | typeof ESCROW_PROGRAM_ERROR__INVALID_AMOUNT
  | typeof ESCROW_PROGRAM_ERROR__INVALID_MAKER
  | typeof ESCROW_PROGRAM_ERROR__INVALID_MINT_A
  | typeof ESCROW_PROGRAM_ERROR__INVALID_MINT_B;

let escrowProgramErrorMessages: Record<EscrowProgramError, string> | undefined;
if (process.env.NODE_ENV !== "production") {
  escrowProgramErrorMessages = {
    [ESCROW_PROGRAM_ERROR__INVALID_AMOUNT]: `Invalid amount`,
    [ESCROW_PROGRAM_ERROR__INVALID_MAKER]: `Invalid maker`,
    [ESCROW_PROGRAM_ERROR__INVALID_MINT_A]: `Invalid mint a`,
    [ESCROW_PROGRAM_ERROR__INVALID_MINT_B]: `Invalid mint B`,
  };
}

export function getEscrowProgramErrorMessage(code: EscrowProgramError): string {
  if (process.env.NODE_ENV !== "production") {
    return (escrowProgramErrorMessages as Record<EscrowProgramError, string>)[code];
  }

  return "Error message not available in production bundles.";
}

export function isEscrowProgramError<TProgramErrorCode extends EscrowProgramError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(error, transactionMessage, ESCROW_PROGRAM_PROGRAM_ADDRESS, code);
}
