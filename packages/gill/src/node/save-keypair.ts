import { appendFileSync, writeFileSync } from "node:fs";
import { homedir } from "node:os";
import { resolve } from "node:path";

import { createKeyPairSignerFromBytes, type KeyPairSigner } from "@solana/kit";

import { extractBytesFromKeyPair } from "../core";
import { loadKeypairSignerFromFile } from "./load-keypair";

/**
 * Save an extractable `CryptoKeyPair` to a filesystem wallet json file
 * (i.e. same format as those generated by the `solana-keygen` command)
 *
 * @param keypair - an extractable `CryptoKeyPair`
 * @param filePath - path to file where the keypair will be saved
 */
export async function saveKeypairToFile(keypair: CryptoKeyPair, filePath: string): Promise<boolean> {
  if (!filePath.endsWith(".json")) {
    throw new Error("Must provide a json file path to save keypair to");
  }

  const resolvedPath = resolve(filePath.startsWith("~") ? filePath.replace("~", homedir()) : filePath);

  // initialized in multiple steps to help deallocate the bytes faster
  let bytes: Uint8Array | null;
  bytes = await extractBytesFromKeyPair(keypair);
  writeFileSync(resolvedPath, "[" + Array.from(bytes).toString() + "]", "utf8");

  // attempt to reload the saved file to ensure the save was correctly formatted
  const [input, output] = await Promise.all([
    createKeyPairSignerFromBytes(bytes),
    loadKeypairSignerFromFile(resolvedPath),
  ]);

  // help force the key bytes to be deallocated faster
  bytes = null;

  return input.address === output.address;
}

/**
 * Save an extractable `KeyPairSigner` to a filesystem wallet json file
 * (i.e. same format as those generated by the `solana-keygen` command)
 *
 * @param keypairSigner - an extractable `KeyPairSigner`
 * @param filePath - path to file where the keypair will be saved
 */
export async function saveKeypairSignerToFile(keypairSigner: KeyPairSigner, filePath: string): Promise<boolean> {
  return await saveKeypairToFile(keypairSigner.keyPair, filePath);
}

/**
 * Save an extractable `CryptoKeyPair` to a local environment file (e.g. `.env`)
 * (i.e. same format as those generated by the `solana-keygen` command)
 *
 * @param keypair - an extractable `CryptoKeyPair`
 * @param variableName - environment variable name accessible via `process.env[variableName]` after env file is loaded
 * @param envFilePath - environment variable file path, default = `.env` in the current working directory
 */
export async function saveKeypairToEnvFile(
  keypair: CryptoKeyPair,
  variableName: string,
  envFilePath: string = ".env",
): Promise<void> {
  if (process.env[variableName]) {
    throw new Error(`Environment variable '${variableName}' already exist.`);
  }

  const resolvedPath = resolve(envFilePath.startsWith("~") ? envFilePath.replace("~", homedir()) : envFilePath);

  // initialized in multiple steps to help deallocate the bytes faster
  let bytes: Uint8Array | null;
  bytes = await extractBytesFromKeyPair(keypair);
  const signer = await createKeyPairSignerFromBytes(bytes);

  appendFileSync(
    resolvedPath,
    `\n# Solana Address: ${signer.address}` + `\n${variableName}=[${Array.from(bytes).toString()}]`,
    "utf8",
  );

  // help force the key bytes to be deallocated faster
  bytes = null;
}

/**
 * Save an extractable `KeyPairSigner` to a filesystem wallet json file
 * (i.e. same format as those generated by the `solana-keygen` command)
 *
 * @param keypairSigner - an extractable `KeyPairSigner`
 * @param variableName - environment variable name accessible via `process.env[variableName]` after env file is loaded
 * @param envFilePath - environment variable file path, default = `.env` in the current working directory
 */
export async function saveKeypairSignerToEnvFile(
  keypairSigner: KeyPairSigner,
  variableName: string,
  envFilePath: string = ".env",
): Promise<void> {
  return await saveKeypairToEnvFile(keypairSigner.keyPair, variableName, envFilePath);
}
