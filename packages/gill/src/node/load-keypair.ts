import { readFileSync } from "node:fs";
import { homedir } from "node:os";
import { resolve } from "node:path";

import {
  createKeyPairFromBytes,
  createSignerFromKeyPair,
  type KeyPairSigner,
  type TransactionSigner,
} from "@solana/kit";
import { DEFAULT_CLI_KEYPAIR_PATH } from "./const";
import type { loadKeypairFromEnvironmentBase58, loadKeypairSignerFromEnvironmentBase58 } from "./load-keypair-base58";
import { getOrCreateSigner } from "./signers-cache";

/**
 * Load a `CryptoKeyPair` from a filesystem wallet json file
 * (i.e. those generated by the `solana-keygen` command)
 *
 * @param filePath - file path to a json keypair file, default={@link DEFAULT_CLI_KEYPAIR_PATH}
 */
export async function loadKeypairFromFile(filePath: string = DEFAULT_CLI_KEYPAIR_PATH): Promise<CryptoKeyPair> {
  const resolvedPath = resolve(filePath.startsWith("~") ? filePath.replace("~", homedir()) : filePath);
  return createKeyPairFromBytes(Uint8Array.from(JSON.parse(readFileSync(resolvedPath, "utf8"))));
}

/**
 * Load a `KeyPairSigner` from a filesystem wallet json file
 * (i.e. those generated by the `solana-keygen` command)
 *
 * @param filePath - file path to a json keypair file, default={@link DEFAULT_CLI_KEYPAIR_PATH}
 * @param existingSigner - optional existing signer to deduplicate against. If the loaded keypair has the same address, returns the existing signer instead of creating a new one
 */
export async function loadKeypairSignerFromFile(
  filePath: string = DEFAULT_CLI_KEYPAIR_PATH,
  existingSigner?: TransactionSigner,
): Promise<KeyPairSigner> {
  const keypair = await loadKeypairFromFile(filePath);
  const tempSigner = await createSignerFromKeyPair(keypair);
  return getOrCreateSigner(tempSigner.address, () => tempSigner);
}

/**
 * Load a `CryptoKeyPair` from an environment variable
 * (i.e. those generated by the `solana-keygen` command)
 *
 * Note: for base58 encoded keypairs in environment variables use {@link loadKeypairFromEnvironmentBase58}
 *
 * @param variableName - environment variable name accessible via `process.env[variableName]`
 */
export async function loadKeypairFromEnvironment<TName extends keyof NodeJS.ProcessEnv | string>(
  variableName: TName,
): Promise<CryptoKeyPair> {
  if (!process.env[variableName]) {
    throw new Error(`Environment variable '${variableName}' not set`);
  }
  return createKeyPairFromBytes(Uint8Array.from(JSON.parse(process.env[variableName])));
}

/**
 * Load a `KeyPairSigner` from a environment variable
 * (i.e. those generated by the `solana-keygen` command)
 *
 * Note: for base58 encoded keypairs in environment variables use {@link loadKeypairSignerFromEnvironmentBase58}
 *
 * @param variableName - environment variable name accessible via `process.env[variableName]`
 * @param existingSigner - optional existing signer to deduplicate against. If the loaded keypair has the same address, returns the existing signer instead of creating a new one
 */
export async function loadKeypairSignerFromEnvironment<TName extends keyof NodeJS.ProcessEnv | string>(
  variableName: TName,
  existingSigner?: TransactionSigner,
): Promise<KeyPairSigner> {
  const keypair = await loadKeypairFromEnvironment(variableName);
  const tempSigner = await createSignerFromKeyPair(keypair);
  return getOrCreateSigner(tempSigner.address, () => tempSigner);
}
