/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Codec,
  combineCodec,
  type Decoder,
  type Encoder,
  getStructDecoder,
  getStructEncoder,
  getUtf8Decoder,
  getUtf8Encoder,
} from "@solana/codecs";
import type {
  AccountMeta,
  Address,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  TransactionSigner,
} from "@solana/kit";
import { AccountRole } from "@solana/kit";

import { MEMO_PROGRAM_ADDRESS } from "../programs";

export type AddMemoInstruction<
  TProgram extends string = typeof MEMO_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> & InstructionWithAccounts<TRemainingAccounts> & InstructionWithData<Uint8Array>;

export type AddMemoInstructionData = { memo: string };

export type AddMemoInstructionDataArgs = AddMemoInstructionData;

export function getAddMemoInstructionDataEncoder(): Encoder<AddMemoInstructionDataArgs> {
  return getStructEncoder([["memo", getUtf8Encoder()]]);
}

export function getAddMemoInstructionDataDecoder(): Decoder<AddMemoInstructionData> {
  return getStructDecoder([["memo", getUtf8Decoder()]]);
}

export function getAddMemoInstructionDataCodec(): Codec<AddMemoInstructionDataArgs, AddMemoInstructionData> {
  return combineCodec(getAddMemoInstructionDataEncoder(), getAddMemoInstructionDataDecoder());
}

export type AddMemoInput = {
  memo: AddMemoInstructionDataArgs["memo"];
  signers?: Array<TransactionSigner>;
};

export function getAddMemoInstruction<TProgramAddress extends Address = typeof MEMO_PROGRAM_ADDRESS>(
  input: AddMemoInput,
  config?: { programAddress?: TProgramAddress },
): AddMemoInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = (args.signers ?? []).map((signer) => ({
    address: signer.address,
    role: AccountRole.READONLY_SIGNER,
    signer,
  }));

  const instruction = {
    accounts: remainingAccounts,
    data: getAddMemoInstructionDataEncoder().encode(args as AddMemoInstructionDataArgs),
    programAddress,
  } as AddMemoInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedAddMemoInstruction<TProgram extends string = typeof MEMO_PROGRAM_ADDRESS> = {
  data: AddMemoInstructionData;
  programAddress: Address<TProgram>;
};

export function parseAddMemoInstruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<Uint8Array>,
): ParsedAddMemoInstruction<TProgram> {
  return {
    data: getAddMemoInstructionDataDecoder().decode(instruction.data),
    programAddress: instruction.programAddress,
  };
}
