/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Codec,
  combineCodec,
  type Decoder,
  type Encoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
  transformEncoder,
} from "@solana/codecs";
import type {
  AccountMeta,
  AccountSignerMeta,
  Address,
  Instruction,
  InstructionWithAccounts,
  InstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
} from "@solana/kit";

import { getAccountMetaFactory, type ResolvedAccount } from "../../../shared";
import { TOKEN_METADATA_PROGRAM_ADDRESS } from "../programs";
import {
  type CollectionDetails,
  type CollectionDetailsArgs,
  type DataV2,
  type DataV2Args,
  getCollectionDetailsDecoder,
  getCollectionDetailsEncoder,
  getDataV2Decoder,
  getDataV2Encoder,
} from "../types";

export const CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR = 33;

export function getCreateMetadataAccountV3DiscriminatorBytes(): ReadonlyUint8Array {
  return getU8Encoder().encode(CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR);
}

export type CreateMetadataAccountV3Instruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetadata extends AccountMeta<string> | string = string,
  TAccountMint extends AccountMeta<string> | string = string,
  TAccountMintAuthority extends AccountMeta<string> | string = string,
  TAccountPayer extends AccountMeta<string> | string = string,
  TAccountUpdateAuthority extends AccountMeta<string> | string = string,
  TAccountSystemProgram extends AccountMeta<string> | string = "11111111111111111111111111111111",
  TAccountRent extends AccountMeta<string> | string | undefined = undefined,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> & InstructionWithAccounts<
    [
      TAccountMetadata extends string ? WritableAccount<TAccountMetadata> : TAccountMetadata,
      TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
      TAccountMintAuthority extends string
        ? AccountSignerMeta<TAccountMintAuthority> & ReadonlySignerAccount<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountPayer extends string
        ? AccountSignerMeta<TAccountPayer> & WritableSignerAccount<TAccountPayer>
        : TAccountPayer,
      TAccountUpdateAuthority extends string ? ReadonlyAccount<TAccountUpdateAuthority> : TAccountUpdateAuthority,
      TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
      ...(TAccountRent extends undefined
        ? []
        : [TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent]),
      ...TRemainingAccounts,
    ]
  > & InstructionWithData<Uint8Array>;

export type CreateMetadataAccountV3InstructionData = {
  collectionDetails: Option<CollectionDetails>;
  data: DataV2;
  discriminator: number;
  isMutable: boolean;
};

export type CreateMetadataAccountV3InstructionDataArgs = {
  collectionDetails: OptionOrNullable<CollectionDetailsArgs>;
  data: DataV2Args;
  isMutable: boolean;
};

export function getCreateMetadataAccountV3InstructionDataEncoder(): Encoder<CreateMetadataAccountV3InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["data", getDataV2Encoder()],
      ["isMutable", getBooleanEncoder()],
      ["collectionDetails", getOptionEncoder(getCollectionDetailsEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR,
    }),
  );
}

export function getCreateMetadataAccountV3InstructionDataDecoder(): Decoder<CreateMetadataAccountV3InstructionData> {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["data", getDataV2Decoder()],
    ["isMutable", getBooleanDecoder()],
    ["collectionDetails", getOptionDecoder(getCollectionDetailsDecoder())],
  ]);
}

export function getCreateMetadataAccountV3InstructionDataCodec(): Codec<
  CreateMetadataAccountV3InstructionDataArgs,
  CreateMetadataAccountV3InstructionData
> {
  return combineCodec(
    getCreateMetadataAccountV3InstructionDataEncoder(),
    getCreateMetadataAccountV3InstructionDataDecoder(),
  );
}

export type CreateMetadataAccountV3Input<
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  collectionDetails: CreateMetadataAccountV3InstructionDataArgs["collectionDetails"];
  data: CreateMetadataAccountV3InstructionDataArgs["data"];
  isMutable: CreateMetadataAccountV3InstructionDataArgs["isMutable"];
  /** Metadata key (pda of ['metadata', program id, mint id]) */
  metadata: Address<TAccountMetadata>;
  /** Mint of token asset */
  mint: Address<TAccountMint>;
  /** Mint authority */
  mintAuthority: TransactionSigner<TAccountMintAuthority>;
  /** payer */
  payer: TransactionSigner<TAccountPayer>;
  /** Rent info */
  rent?: Address<TAccountRent>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** update authority info */
  updateAuthority: Address<TAccountUpdateAuthority> | TransactionSigner<TAccountUpdateAuthority>;
};

export function getCreateMetadataAccountV3Instruction<
  TAccountMetadata extends string,
  TAccountMint extends string,
  TAccountMintAuthority extends string,
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
>(
  input: CreateMetadataAccountV3Input<
    TAccountMetadata,
    TAccountMint,
    TAccountMintAuthority,
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): CreateMetadataAccountV3Instruction<
  TProgramAddress,
  TAccountMetadata,
  TAccountMint,
  TAccountMintAuthority,
  TAccountPayer,
  (typeof input)["updateAuthority"] extends TransactionSigner<TAccountUpdateAuthority>
    ? AccountSignerMeta<TAccountUpdateAuthority> & ReadonlySignerAccount<TAccountUpdateAuthority>
    : TAccountUpdateAuthority,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    metadata: { isWritable: true, value: input.metadata ?? null },
    mint: { isWritable: false, value: input.mint ?? null },
    mintAuthority: { isWritable: false, value: input.mintAuthority ?? null },
    payer: { isWritable: true, value: input.payer ?? null },
    rent: { isWritable: false, value: input.rent ?? null },
    systemProgram: { isWritable: false, value: input.systemProgram ?? null },
    updateAuthority: {
      isWritable: false,
      value: input.updateAuthority ?? null,
    },
  };
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "omitted");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ].filter(<T>(x: T | undefined): x is T => x !== undefined),
    data: getCreateMetadataAccountV3InstructionDataEncoder().encode(args as CreateMetadataAccountV3InstructionDataArgs),
    programAddress,
  } as CreateMetadataAccountV3Instruction<
    TProgramAddress,
    TAccountMetadata,
    TAccountMint,
    TAccountMintAuthority,
    TAccountPayer,
    (typeof input)["updateAuthority"] extends TransactionSigner<TAccountUpdateAuthority>
      ? AccountSignerMeta<TAccountUpdateAuthority> & ReadonlySignerAccount<TAccountUpdateAuthority>
      : TAccountUpdateAuthority,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedCreateMetadataAccountV3Instruction<
  TProgram extends string = typeof TOKEN_METADATA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  accounts: {
    /** Metadata key (pda of ['metadata', program id, mint id]) */
    metadata: TAccountMetas[0];
    /** Mint of token asset */
    mint: TAccountMetas[1];
    /** Mint authority */
    mintAuthority: TAccountMetas[2];
    /** payer */
    payer: TAccountMetas[3];
    /** Rent info */
    rent?: TAccountMetas[6] | undefined;
    /** System program */
    systemProgram: TAccountMetas[5];
    /** update authority info */
    updateAuthority: TAccountMetas[4];
  };
  data: CreateMetadataAccountV3InstructionData;
  programAddress: Address<TProgram>;
};

export function parseCreateMetadataAccountV3Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<Uint8Array>,
): ParsedCreateMetadataAccountV3Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  let optionalAccountsRemaining = instruction.accounts.length - 6;
  const getNextOptionalAccount = () => {
    if (optionalAccountsRemaining === 0) return undefined;
    optionalAccountsRemaining -= 1;
    return getNextAccount();
  };
  return {
    accounts: {
      metadata: getNextAccount(),
      mint: getNextAccount(),
      mintAuthority: getNextAccount(),
      payer: getNextAccount(),
      rent: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      updateAuthority: getNextAccount(),
    },
    data: getCreateMetadataAccountV3InstructionDataDecoder().decode(instruction.data),
    programAddress: instruction.programAddress,
  };
}
